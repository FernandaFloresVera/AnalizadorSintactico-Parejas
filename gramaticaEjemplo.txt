_nombre: string = “Luis”;
_edad: int = 18;
_x: int = 4;

fn saludo() {
cycle (i: int = 0; i > x; i++) {
screen.show(“Hola” + _nombre);
}
}

fn acceder() {
when (_edad >= 18) {
screen.show(“Acceso permitido”);
} so {
screen.show(“Acceso denegado”);
}
}

run() {
saludo();
acceder();
}



start: structures*

structures: DEF_VARIABLE | INICIO | FN_WHILE | FN_WHEN

DEF_VARIABLE: VARIABLE DOS_P TYPE EQUAL TYPE_V P

INICIO: RUN PAR_A PAR_C LLAVE_A IDENTIFICADOR PAR_A PAR_C P IDENTIFICADOR PAR_A PAR_C P LLAVE_C
INICIO: RUN PAR_A PAR_C LLAVE_A statement* LLAVE_C
statement: IDENTIFICADOR PAR_A PAR_C P

FN_WHILE: FN IDENTIFICADOR PAR_A PAR PAR_C LLAVE_A CYCLES
CYCLES: CYCLE PAR_A STATIC DOS_P T_I EQUAL D MAYOR X P INCREMENTO PAR_C LLAVE_A MORE LLAVE_C
MORE: SCREEN MAS VARIABLE PAR_C P   
SCREEN: S_SCREEN PAR_A CADENA

FN_WHEN: FN IDENTIFICADOR PAR_A PAR_C LLAVE_A WHEN LLAVE_C
WHEN: C_WHEN PAR_A VARIABLE MAYORQUE D PAR_C LLAVE_A SCREEN PAR_C P LLAVE_C SO PAR_A SCREEN PAR_C P LLAVE_C 

VARIABLE: /_[a-z][a-z]*/
DOS_P: ":"
TYPE: "int" | "string"
EQUAL: "="
TYPE_V: 
    INT         -> int
    STRING      -> string
P: ";"
RUN: "run"
PAR_A: "("
PAR_C: "("
LLAVE_A: "{"
LLAVE_C: "}"
IDENTIFICADOR: /[a-z][a-z]*/
FN: "fn "
CYCLE: "cycle"
STATIC: "i"
T_I: "int"
D: /\d+/
MAYOR: ">"
X: "x"
INCREMENTO: "i++"
MAYORQUE: ">="
S_SCREEN: "screen.show"
CADENA: /"[a-zA-Z]+"/
MAS: "+"
C_WHEN: "when"
SO: "so"

%import common.WS
%ignore WS

__________________________________________________________________-

start: structures*

structures: DEF_VARIABLE | INICIO | FN_WHILE | FN_WHEN

DEF_VARIABLE: VARIABLE DOS_P TYPE EQUAL TYPE_V P

INICIO: RUN PAR_A PAR_C LLAVE_A IDENTIFICADOR PAR_A PAR_C P IDENTIFICADOR PAR_A PAR_C P LLAVE_C
INICIO: RUN PAR_A PAR_C LLAVE_A statement* LLAVE_C
statement: IDENTIFICADOR PAR_A PAR_C P

FN_WHILE: FN IDENTIFICADOR PAR_A PAR PAR_C LLAVE_A CYCLES
CYCLES: CYCLE PAR_A STATIC DOS_P T_I EQUAL D MAYOR X P INCREMENTO PAR_C LLAVE_A MORE LLAVE_C
MORE: SCREEN MAS VARIABLE PAR_C P   
SCREEN: S_SCREEN PAR_A CADENA

FN_WHEN: FN IDENTIFICADOR PAR_A PAR_C LLAVE_A WHEN LLAVE_C
WHEN: C_WHEN PAR_A VARIABLE MAYORQUE D PAR_C LLAVE_A SCREEN PAR_C P LLAVE_C SO PAR_A SCREEN PAR_C P LLAVE_C 

VARIABLE: /_[a-z][a-z]*/
DOS_P: ":"
TYPE: "int" | "string"
EQUAL: "="
TYPE_V: 
    INT         -> int
    STRING      -> string
P: ";"
RUN: "run"
PAR_A: "("
PAR_C: "("
LLAVE_A: "{"
LLAVE_C: "}"
IDENTIFICADOR: /[a-z][a-z]*/
FN: "fn "
CYCLE: "cycle"
STATIC: "i"
T_I: "int"
D: /\d+/
MAYOR: ">"
X: "x"
INCREMENTO: "i++"
MAYORQUE: ">="
S_SCREEN: "screen.show"
CADENA: /"[a-zA-Z]+"/
MAS: "+"
C_WHEN: "when"
SO: "so"

%import common.WS
%ignore WS